import{has as e,uniq as n,difference as t,get as r,intersection as o,concat as d,set as c}from"lodash";var y,a;!function(e){e.number="number",e.string="string",e.boolean="boolean",e.null="null",e[void 0]="undefined",e.object="object",e.array="array",e.any="any"}(y||(y={})),function(e){e[e.Id1=0]="Id1",e[e.Id2=1]="Id2",e[e.Id3=2]="Id3",e[e.Id4=3]="Id4"}(a||(a={}));const s=e=>{let n=y.any;const t=typeof e;return"number"===t?n=y.number:"string"===t?n=y.string:"boolean"===t?n=y.boolean:"undefined"===t?n=y.undefined:"object"===t&&(n=null===e?y.null:Array.isArray(e)?y.array:y.object),n};var i;!function(e){e.key="key",e.type="type",e[void 0]="undefined"}(i||(i={}));const f=(r,c,i,l)=>{const u=s(r),b=`${i}.${u}`;if(e(c,i)||l(c,i,a.Id1),e(c,b)||l(c,b,a.Id2),u===y.array){let e=[],i=[],u=!1;for(let n=0;n<r.length;n+=1)if(f(r[n],c,b,l),s(r[n])===y.object)if(u){const c=Object.keys(r[n]);i=o(i,c),e=d(e,t(e,c))}else i=Object.keys(r[n]),e=i,u=!0;const h=n(t(e,i));for(let e=0;e<h.length;e+=1)l(c,`${b}.${y.object}.${h[e]}.${y.undefined}`,a.Id3)}else if(u===y.object){const e=Object.keys(r);for(let n=0;n<e.length;n+=1)f(r[e[n]],c,`${b}.${e[n]}`,l)}return c},l=(e,n,t,o)=>{const d=s(e),c=`${t}.${d}`,i=r(n,t);if(d!==y.undefined||i[y.undefined]){if(d===y.array&&i[y.array])for(let t=0;t<e.length;t+=1)l(e[t],n,c,o);else if(d===y.object&&i[y.object]){const t=Object.keys(i[y.object]);for(let r=0;r<t.length;r+=1)l(e[t[r]],n,`${c}.${t[r]}`,o)}}else o(n,t,a.Id4)},u=(n,t,r,o,d)=>{d===a.Id1?(o.push(r),n.push({key:r,type:i.key})):d===a.Id2?o.find((e=>0===r.indexOf(e)))||n.push({key:r,type:i.type}):d===a.Id3?e(t,r)||o.find((e=>0===r.indexOf(e)))||n.push({key:r,type:i.type}):d===a.Id4&&(n.find((e=>0===e.key.indexOf(r)))||n.push({key:r,type:i.undefined}))},b=e=>{const n={schema:{}};return f(e,n,"schema",((e,n,t)=>{((e,n,t)=>{c(e,n,{})})(e,n)})),n},h=(e,n)=>{const t=[],r=[];return f(n,e,"schema",((e,n,o)=>{u(t,e,n,r,o)})),l(n,e,"schema",((e,n,o)=>{u(t,e,n,r,o)})),t};var p={Type:y,identifyType:s,SchemaErrorType:i,makeSchema:b,checkSchema:h};export{i as SchemaErrorType,y as Type,h as checkSchema,p as default,s as identifyType,b as makeSchema};
